{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "My API",
        "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
    },
    "host": "localhost:5000",
    "basePath": "/",
    "tags": [
        {
            "name": "Post",
            "description": "Everything about your Pets"
        },
        {
            "name": "Product",
            "description": "Everything about your Products"
        },
        {
            "name": "Category",
            "description": "Everything about your Category"
        },
        {
            "name": "Building",
            "description": "Everything about your Building"
        },
        {
            "name": "User",
            "description": "Everything about your User"
        },
        {
            "name": "Img",
            "description": "Everything about your User"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/api/post/limit?page={page}": {
            "get": {
                "tags": [
                    "Post"
                ],
                "summary": "Get post limit 10 post",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "path",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/post/": {
            "get": {
                "tags": [
                    "Post"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all post",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/post/create": {
            "post": {
                "tags": [
                    "Post"
                ],
                "summary": "Add a new post",
                "operationId": "addPost",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "description": "",
                "parameters": [
                    {
                        "in": "body",
                        "name": "product",
                        "description": "The product to create",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "title": {
                                    "type": "string",
                                    "description": "The product title",
                                    "example": "Test Product"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "The product description",
                                    "example": "This is a test product"
                                },
                                "userId": {
                                    "type": "string",
                                    "description": "The user ID of the product owner",
                                    "example": "dsadsadasdsadasd"
                                },
                                "productName": {
                                    "type": "string",
                                    "description": "The product name",
                                    "example": "Sex toy"
                                },
                                "price": {
                                    "type": "string",
                                    "description": "The product price",
                                    "example": "ssssssss"
                                },
                                "categoryId": {
                                    "type": "string",
                                    "description": "The category ID of the product",
                                    "example": "123"
                                },
                                "imgIds": {
                                    "type": "array",
                                    "description": "The array of image IDs",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "url": {
                                                "type": "string",
                                                "description": "The ID of the image",
                                                "example": "https://example.com/image10.jpg"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/api/post/delete/{id}": {
            "delete": {
                "tags": [
                    "Post"
                ],
                "description": "",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to retrieve",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/post/{id}": {
            "get": {
                "summary": "Get a post by ID",
                "description": "Retrieves the details of a single post by ID",
                "tags": [
                    "Post"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the post to retrieve",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "content": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Logs in user with Firebase ID token",
                "description": "This endpoint verifies the Firebase ID token provided in the request body, and logs in the user associated with the email address in the ID token payload.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "token",
                        "description": "Firebase ID token as a string",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "description": "Access token to be used in subsequent requests"
                                        },
                                        "refreshToken": {
                                            "type": "string",
                                            "description": "Refresh token to be used to get a new access token after it expires"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token from Firebase",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "number"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "err": {
                                            "type": "number"
                                        },
                                        "msg": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/building/create": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Building"
                ],
                "summary": "Create a new building",
                "requestBody": {
                    "description": "Building object to be created",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Building"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Building created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Building"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing inputs"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/building/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Building"
                ],
                "summary": "Get all buildings",
                "responses": {
                    "200": {
                        "description": "Buildings retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Building"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/building/update": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Building"
                ],
                "summary": "Update a building",
                "parameters": [
                    {
                        "name": "buildingId",
                        "in": "query",
                        "description": "ID of the building to update.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buildingIdUpdate",
                        "in": "body",
                        "description": "New ID for the building.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Building updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Building"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing inputs",
                        "content": {
                            "application/json": {
                                "example": {
                                    "msg": "Missing inputs"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "msg": "Fail at building controller: {error message}"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/building/delete": {
            "delete": {
                "tags": [
                    "Building"
                ],
                "summary": "Delete a building",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the building to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "name": {
                                    "type": "string",
                                    "example": "Building A"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "msg": {
                                    "type": "string",
                                    "example": "Missing id"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "msg": {
                                    "type": "string",
                                    "example": "Faill at auth controller: Internal server error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/user/current": {
            "get": {
                "tags": [
                    "User"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "summary": "Get current user",
                "description": "Returns the current user based on the authenticated token",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/category/": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "example": 1
                                    },
                                    "CategoryName": {
                                        "type": "string",
                                        "example": "Do gia dung"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "integer",
                                    "example": -1
                                },
                                "msg": {
                                    "type": "string",
                                    "example": "Failed at post controller: Internal server error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/category/create": {
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create a new category",
                "parameters": [
                    {
                        "in": "body",
                        "name": "product",
                        "description": "The product to create",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "CategoryName": {
                                    "type": "string",
                                    "description": "The product title",
                                    "example": "Do co"
                                },
                                "attribute": {
                                    "type": "string",
                                    "description": "The product description",
                                    "example": "Chua ro"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "name": {
                                    "type": "string",
                                    "example": "Books"
                                },
                                "attribute": {
                                    "type": "string",
                                    "example": "Fiction"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "err": {
                                    "type": "integer",
                                    "example": -1
                                },
                                "msg": {
                                    "type": "string",
                                    "example": "Failed at post controller: Internal server error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/category/update": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Update a Category",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "ID of building to update"
                    }
                ],
                "requestBody": {
                    "description": "Category object to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuildingUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Building updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Building"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing inputs",
                        "content": {
                            "application/json": {
                                "example": {
                                    "msg": "Missing inputs"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "msg": "Fail at building controller: {error message}"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/category/delete": {
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete a building",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the building to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "name": {
                                    "type": "string",
                                    "example": "Building A"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "msg": {
                                    "type": "string",
                                    "example": "Missing id"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "msg": {
                                    "type": "string",
                                    "example": "Faill at auth controller: Internal server error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT authorization, example: Beaer + token"
        }
    },
    "components": {
        "schemas": {
            "Building": {
                "type": "object",
                "properties": {
                    "buildingId": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                },
                "buildingId": {
                    "type": "string"
                }
            }
        },
        "UserInput": {
            "type": "object",
            "properties": {
                "fullname": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                },
                "buildingId": {
                    "type": "string"
                }
            }
        },
        "Categories": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "atribute": {
                    "type": "string"
                }
            }
        },
        "CategorieInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "atribute": {
                    "type": "string"
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "int64",
                    "description": "The unique identifier for the role."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role."
                }
            },
            "required": [
                "name"
            ]
        },
        "Product": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "available",
                        "out of stock"
                    ]
                },
                "postId": {
                    "type": "integer",
                    "format": "int64"
                },
                "categoryId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Post": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "enum": [
                        "available",
                        "out of stock"
                    ]
                },
                "like": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                }
            }
        }
    }
}
